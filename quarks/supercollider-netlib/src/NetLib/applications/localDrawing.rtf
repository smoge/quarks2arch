{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf0 \
(\
a = \cf2 Collective\cf0 .new;\
b = \cf2 Collective\cf0 .new;\
\
a.start;\
b.start;\
\
a.autoCollect;\
b.autoCollect;\
)\
\
\
(\
a.makeWin;\
b.makeWin;\
);\
\
\
a.fixConnections; \cf3 // just if the connections don't work.\cf0 \
a.postPairs;\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 var\cf0  drawing;\
\cf2 var\cf0  format = [340, 360];\
\cf2 var\cf0  colors = [\cf2 Color\cf0 .black, \cf2 Color\cf0 .gray];\
\cf2 var\cf0  penWidth = 1;\
\
#e, f = [a, b].collect();\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 // based on example of SCUserView\cf0 \
drawing = \{ \cf2 | collective, i |\cf0 \
\
	\cf2 var\cf0  w, v, txt, tmppoints, undone, all,  participation;\
	tmppoints = (); \cf3 // dictionary for temp data of each collaborator\cf0 \
	undone = ();\
	all = ();\
	w = \cf2 GUI\cf0 .window.new(\cf4 "draw on"\cf0  + collective.myName, \
		\cf2 Rect\cf0 (128, 64 + (format[1] + 10 * i), format[0], format[1])\
	);\
	w.view.background= colors[1];\
	\
	participation = \cf2 Participation\cf0 (collective).start;\
	\
	participation.addResponder(\cf5 '/track'\cf0 , \{ \cf2 |t,r,msg|\cf0 \
		\cf2 var\cf0  point = msg[2] @ msg[3];\
		\cf2 var\cf0  name = msg[1];\
		tmppoints[name] = tmppoints[name].add(point);\
		defer \{\'caw.refresh \};\
	\});\
	participation.addResponder(\cf5 '/endTrack'\cf0 , \{ \cf2 |t,r,msg|\cf0 \
		\cf2 var\cf0  name = msg[1];\
		all[name] = all[name].add(tmppoints[name].copy);\
		tmppoints[name] = [];\
		defer \{\'caw.refresh \};\
	\});\
	participation.addResponder(\cf5 '/undo'\cf0 , \{ \cf2 |t,r,msg|\cf0 \
		\cf2 var\cf0  name = msg[1];\
		undone[name] = undone[name].add(all[name].pop);\
		defer \{\'caw.refresh \};\
	\});\
	participation.addResponder(\cf5 '/redo'\cf0 , \{ \cf2 |t,r,msg|\cf0 \
		\cf2 var\cf0  name = msg[1];\
		\cf2 var\cf0  points = undone[name].pop;\
		points !? \{\'caall[name].add(points) \};\
		defer \{\'caw.refresh \};\
	\});\
	v = \cf2 GUI\cf0 .userView.new(w, w.view.bounds)\
		.mouseTrackFunc_(\{\cf2 |v,x,y|\cf0 \
			if(participation.isListening) \{\
				collective.sendToEach(\cf5 '/track'\cf0 , collective.myName, x, y);\
			\}\
		\})\
		.mouseEndTrackFunc_(\{\cf2 |v,x,y|\cf0 \
			if(participation.isListening) \{\
				collective.sendToEach(\cf5 '/endTrack'\cf0 , collective.myName);\
			\}\
		\})\
		.keyDownFunc_(\{\cf2 |v, key|\cf0 \
			if(key == $z) \{\
				if(participation.isListening) \{\
					collective.sendToEach(\cf5 '/undo'\cf0 , collective.myName);\
				\}\
			\};\
			if(key == $Z) \{\
				if(participation.isListening) \{\
					collective.sendToEach(\cf5 '/redo'\cf0 , collective.myName);\
				\}\
			\};\
		\});\
	\
	w.drawHook_\{\
		\cf2 GUI\cf0 .pen.use \{	\
			\cf2 GUI\cf0 .pen.width = penWidth;\
			colors[0].set;\
			\cf2 GUI\cf0 .pen.beginPath;\
			\
			tmppoints.do\{	\cf2 |points|\cf0 \
				points.do \{\cf2 |p, i|\cf0 \
					if(i == 0)\{\
					\cf2 GUI\cf0 .pen.moveTo(p);\
					\}\{\
					\cf2 GUI\cf0 .pen.lineTo(p);\
					\}\
				\}\
			\};\
			all.do \{\cf2 |pointList|\cf0 \
				pointList.do\{\cf2 |points|\cf0 \
					points.do\{\cf2 |p, i|\cf0 \
						if(i == 0)\{\
							\cf2 GUI\cf0 .pen.moveTo(p);\
						\}\{\
							\cf2 GUI\cf0 .pen.lineTo(p);\
						\}\
					\};\
				\};\
			\};\
			\cf2 GUI\cf0 .pen.stroke;\
		\};\
	\};\
	\
		\
	w.front;\
\};\
\
\
[a, b].do(drawing);\
)\
\
\cf3 /////////////////// the end:\cf0 \
\
[a, b].do(\cf2 _\cf0 .stop);\
}