{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf410
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 //var coll = Collective.default;\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 var\cf0  coll = \cf3 Collective\cf0 .new;\
\
\cf3 var\cf0  w, sb, width, dec, activeBut, cBut, pBut, chatBut, nameBut, killBut, allView;\
\cf3 var\cf0  updater, onoff, off_func, check_func, cadavre, chat, showBackups;\
\
\cf3 Library\cf0 .put(\cf4 \\collective\cf0 , coll.myName, coll);\
\
cadavre = \cf3 Cadavre\cf0 .new(coll);\
\
\cf2 // on by default\cf0 \
coll.start;\
coll.autoCollect(\cf3 true\cf0 );\
cadavre.start;\
\
showBackups = \{ cadavre.backups !? \{\cf3 Document\cf0 (\cf5 "cadavres exquis"\cf0 , cadavre.backups.join)\} \};\
\
sb = \cf3 GUI\cf0 .window.screenBounds.extent.asArray;\
\
w = \cf3 GUI\cf0 .window.new(\cf5 "collective"\cf0 , \cf3 Rect\cf0 (1, sb[1] - 300, 220, 400));\
w.front;\
\
w.view.decorator = dec = \cf3 FlowLayout\cf0 (w.view.bounds, 10 @ 5, 2 @ 2);\
\
check_func = \cf3 false\cf0 ;\
\cf2 // \{ cadavre.docs.notNil and: \{cadavre.docs.notEmpty\} \};\cf0 \
\
off_func = \{ \
	if(check_func.value) \{\
			\cf5 "please close windows first."\cf0 .postln;\
		\} \{\
			coll.quit; \
			cadavre.stop; \
			chat.stop;\
			chat !? \{ chat.close \};\
			chat = \cf3 nil\cf0 ;\
			onoff = 0;\
		\}\
 \};\
\
activeBut = \cf3 GUI\cf0 .button.new(w, \cf3 Rect\cf0 (0, 0, 50, 30));\
activeBut.states = [[\cf5 "away"\cf0 , \cf3 Color\cf0 .black, \cf3 Color\cf0 .clear], [\cf5 "here"\cf0 , \cf3 Color\cf0 .red, \cf3 Color\cf0 .clear]];\
activeBut.action = \{\
	\
	if(onoff == 0) \{\
		coll.start;\
		chat !? \{chat.start\};\
		cadavre !? \{cadavre.start\};\
		coll.autoCollect(\cf3 true\cf0 );\
		\cf5 "starting ..."\cf0 .postln;\
		onoff = 1;\
	\} \{	\
		\cf2 //off_func.value\cf0 \
		coll.quit; onoff = 0;\
		cadavre.stop; \
		chat.stop;\
	\};\
\};\
\
\
cBut = \cf3 GUI\cf0 .button.new(w, \cf3 Rect\cf0 (0, 0, 60, 30));\
cBut.states = [[\cf5 "cadavre"\cf0 , \cf3 Color\cf0 .black, \cf3 Color\cf0 .clear]];\
cBut.action = \{ \cf3 |b, x, val|\cf0 \
	if(cadavre.docs.isNil) \{ \
		cadavre.openDoc; \
	\} \{\
		if(cadavre.docs.size <= 2) \{ \cf2 // not too many cadavres\cf0 \
			cadavre.openDoc;\
		\} \{\
			cadavre.docs.choose.front;\
		\}\
	\};\
\};\
\
pBut = \cf3 GUI\cf0 .button.new(w, \cf3 Rect\cf0 (0, 0, 30, 30));\
pBut.states = [[\cf5 "all"\cf0 , \cf3 Color\cf0 .black, \cf3 Color\cf0 .clear]];\
pBut.action = showBackups;\
\
pBut = \cf3 GUI\cf0 .button.new(w, \cf3 Rect\cf0 (0, 0, 30, 30));\
pBut.states = [[\cf5 "kill"\cf0 , \cf3 Color\cf0 .red, \cf3 Color\cf0 .clear]];\
pBut.action = \{ \cf3 |b, x, val|\cf0 \
	\cf3 var\cf0  doc = \cf3 Document\cf0 .current;\
	if(cadavre.docs.remove(doc).notNil) \{\
		doc.onClose = \cf3 nil\cf0 ;\
		doc.close;\
	\};\
\};\
\cf2 /*\
chatBut = GUI.button.new(w, Rect(0, 0, 30, 30));\
chatBut.states = [["chat", Color.black, Color.clear]];\
chatBut.action = \{ |b, x, val|\
	if(chat.notNil) \{ \
		chat.stop;\
		chat.close;\
		chat = nil; \
	\} \{\
		chat = ChatWindow(coll);\
		chat.start;\
	\}\
\};\
*/\cf0 \
\
onoff = coll.autoCollectIsActive.binaryValue;\
\
nameBut = \cf3 GUI\cf0 .staticText.new(w, \cf3 Rect\cf0 (0, 0, 150, 30));\
nameBut.string = coll.myName;\
\
dec.nextLine;\
\
allView = \cf3 SCListView\cf0 (w, \cf3 Rect\cf0 (0, 0, 200, 300));\
allView.hiliteColor = \cf3 Color\cf0 .grey;\
updater = \cf3 SkipJack\cf0  \{  \
		allView.items = coll.everybody.keys.asArray.sort;\
		activeBut.value = coll.autoCollectIsActive.binaryValue;\
	\};\
updater.start;\
w.onClose = \{\
	updater.stop;\
	fork \{\
		if(check_func.value) \{ \
			cadavre.docs.do \{ \cf3 |doc|\cf0  cadavre.sendToNext(doc.text) \};\
			1.0.wait;\
		\};\
	\};\
	off_func.value; \
	\cf3 Library\cf0 .put(\cf4 \\collective\cf0 , coll.myName, \cf3 nil\cf0 );\
	showBackups.value;\
\
\};\
\
)\
}